name: CI

on:
  push:
    branches:
      - master
      - "release/**"
  pull_request:

jobs:
  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --workspace --tests --examples -- -D clippy::all

  check:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    name: Check feature permutations using Rust ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    env:
      RUSTFLAGS: -Dwarnings

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - uses: Swatinem/rust-cache@v1

      - run: make checkall

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    name: Test using Rust ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - uses: Swatinem/rust-cache@v1

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-features

  fast-MSRV:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [1.53.0]

    name: Check / Test MSRV ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    env:
      RUSTFLAGS: -Dwarnings

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - uses: Swatinem/rust-cache@v1

      - run: make checkfast

      - run: make testfast

  # Code coverage instrumentation is current broken in recent Rust nightlies,
  # as they fail processing with the following error:
  # `Failed to load coverage: Truncated coverage data`
  # https://github.com/taiki-e/cargo-llvm-cov/issues/128
  codecov:
    name: Code Coverage
    runs-on: ubuntu-latest
    continue-on-error: true # well, its nightly and highly experimental

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2022-01-14
          components: llvm-tools-preview
          override: true

      - uses: Swatinem/rust-cache@v1

      - uses: Swatinem/fucov@v1
        with:
          args: --workspace --all-features

      # Or maybe switch to `cargo-llvm-cov` later once its doctests are fixed

      #- uses: taiki-e/install-action@cargo-llvm-cov

      #- run: cargo llvm-cov --all-features --workspace --doctests --lcov --output-path lcov.info

      - uses: codecov/codecov-action@e156083f13aff6830c92fc5faa23505779fbf649
        with:
          directory: coverage
          #files: lcov.info
