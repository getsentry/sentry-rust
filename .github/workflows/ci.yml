# Notes on Caching:
#
# Caches are keyed by OS, rustc version, job and Cargo.toml hash.
# We additionally cache the `Cargo.lock` file, as that is not being committed
# directly to git.

name: CI

on:
  push:
    branches:
      - master
      - "release/**"
  pull_request:

jobs:
  lints:
    name: Lints
    runs-on: ubuntu-latest
    env:
      cache-name: lints
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            Cargo.lock
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ env.cache-name }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ env.cache-name }}-

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --workspace --tests --examples -- -D clippy::all

  check:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    name: checkall using ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    env:
      cache-name: check
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      # workaround for: https://github.com/actions/cache/issues/403
      - name: Install GNU tar (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gnu-tar
          echo "::add-path::/usr/local/opt/gnu-tar/libexec/gnubin"

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            Cargo.lock
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ env.cache-name }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ env.cache-name }}-

      - run: make checkall

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    name: testall using ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    env:
      cache-name: test
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      # workaround for: https://github.com/actions/cache/issues/403
      - name: Install GNU tar (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gnu-tar
          echo "::add-path::/usr/local/opt/gnu-tar/libexec/gnubin"

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            Cargo.lock
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ env.cache-name }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ env.cache-name }}-

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-features

  fast-MSRV:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [1.40.0]

    name: checkfast/testfast using ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    env:
      cache-name: fast-MSRV
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            Cargo.lock
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ env.cache-name }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ env.cache-name }}

      - run: make checkfast

      - run: make testfast
